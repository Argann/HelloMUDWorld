@using HelloMUDWorld.Data.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject UserManager<HelloMUDWorldUser> UserManager

@implements IAsyncDisposable

<div class="container-fluid">
    <hr>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>

    <div class="fixed-bottom p-0 input-group mb-3 p-3">
        <input type="text" @bind="messageInput" class="form-control" placeholder="Your message here!" aria-describedby="button-addon2">
        <button @onclick="Send" disabled="@(!IsConnected)" class="btn btn-outline-secondary" type="button" id="button-addon2">Send</button>
    </div>
</div>



@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private HelloMUDWorldUser? currentUser;

    private HubConnection? hubConnection;

    private List<string> messages = new List<string>();

    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;

        currentUser = await UserManager.GetUserAsync(authState.User);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.Closed += OnDisconnect;
        hubConnection.Reconnected += OnConnect;

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", currentUser.DisplayName, messageInput);
        }
    }

    private async Task OnConnect(string? s)
    {
        await hubConnection.SendAsync("UserConnectedNotification", currentUser.DisplayName);
    }

    private async Task OnDisconnect(Exception? e)
    {
        await hubConnection.SendAsync("UserDisconnectedNotification", currentUser.DisplayName);
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}